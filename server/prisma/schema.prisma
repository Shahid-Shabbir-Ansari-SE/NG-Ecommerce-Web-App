generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// Define the database schema

model category {
  categoryId          Int    @id @default(autoincrement())
  categoryName        String
  categoryDescription Json?
  parentId            Int?
  parent              category?    @relation("categoryIdToParentId", fields: [parentId], references: [categoryId])
  children            category[]   @relation("categoryIdToParentId")
  products            product[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}


model brand {
  brandId         Int    @id @default(autoincrement())
  brandName       String
  brandDescription String?
  brandImage      String?
  products        product[] @relation("brandIdToProduct")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model productVariant {
  variantId       Int       @id @default(autoincrement())
  productId       Int?
  product         product?   @relation(fields: [productId], references: [productId])
  variantName     String
  variantImage    String
  images          String[]
  stock           Int
  color           String
  size            String[]
  @@unique([productId, variantName, color, size])
}

model review {
  reviewId        Int       @id @default(autoincrement())
  productId       Int?
  userId          Int
  rating          Float
  product         product?   @relation(fields: [productId], references: [productId])
  comment         String
  createdAt       DateTime  @default(now())
  @@unique([productId, userId])
}

model product {
  productId       Int       @id @default(autoincrement())
  productName     String
  productDescription  String
  categoryId      Int
  productVariants productVariant[]
  reviews         review[]
  brandId         Int
  brand           brand       @relation("brandIdToProduct", fields: [brandId], references: [brandId])
  averageRating   Float?
  soldCount       Int?
  regPrice        Float
  salePrice       Float?
  orders          order[]
  productCategory category @relation(fields: [categoryId], references: [categoryId])
  cartId          Int?
  cart            cart?    @relation(fields: [cartId], references: [cartId])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  wishlistId      Int?
  wishlist        wishlist? @relation(fields: [wishlistId], references: [wishlistId])
  couponId        Int?
  coupon          coupon? @relation(fields: [couponId], references: [couponId])
}

model address {
  addressId       Int       @id @default(autoincrement())
  userId          Int
  user            user        @relation(fields: [userId], references: [userId])
  addressLine     String
  city            String
  state           String
  postalCode      Int
  orderAddress    order[]
  country         String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model order {
  orderId         Int       @id @default(autoincrement())
  userId          Int
  products        product[]
  orderTotal      Float
  user            user        @relation(fields: [userId], references: [userId])
  orderStatus     String
  address         address      @relation(fields: [addressId],references: [addressId])
  addressId       Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

}

model user {
  userId          Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String       @unique
  password        String
  role            String
  addresses       address[]
  orders          order[]
  salt            String
  profileImage    String?
  refreshToken    String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model cart {
  cartId          Int       @id @default(autoincrement())
  userId          Int
  products        product[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model wishlist {
  wishlistId      Int       @id @default(autoincrement())
  userId          Int
  products        product[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model coupon {
  couponId        Int       @id @default(autoincrement())
  couponCode      String       @unique
  discount        Float
  products        product[]
  expiryDate      DateTime
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}