import { prisma } from '@configs/prisma.config'
import jwt from 'jsonwebtoken'
import { JWK, JWE } from 'node-jose'
import { Request, Response } from 'express'

async function verifyUser(req: Request, res: Response) {
  const userId = 48

  // Fetch the user from Prisma
  const user = await prisma.user.findUnique({
    where: { userId: userId }
  })

  if (!user) {
    console.error('User not found')
    return res.status(404).json({ error: 'User not found' })
  }

  // Create a JWT token
  const token = jwt.sign({ userId }, 'your_secret_key')

  // Generate a random key for encryption
  const key = await JWK.createKey('oct', 256, { alg: 'A256GCMKW', use: 'enc' })

  // Encrypt the JWT token
  const encryptedToken = await JWE.createEncrypt(
    { format: 'compact', contentAlg: 'A256GCM' },
    key
  )
    .update(token)
    .final()
  console.log('encryptedToken:', encryptedToken)
  // Decrypt the token
  const decryptKey = await JWK.asKey(key)
  const decryptedToken =
    await JWE.createDecrypt(decryptKey).decrypt(encryptedToken)

  // The payload of the JWE is the original JWT
  console.log('decryptedToken:', decryptedToken.plaintext.toString('utf8'))

  // Verify the token
  jwt.verify(token, 'your_secret_key', (err, decoded) => {
    if (err) {
      console.error('Error verifying token:', err)
      return res.status(401).json({ error: 'Token verification failed' })
    } else {
      console.log('Decoded token:', decoded)
      // Handle decoded token as needed
      return res
        .status(200)
        .json({ message: 'Token verified successfully', decoded })
    }
  })
}

// Example Express route usage
// app.post('/verify', verifyUser)

// Remember to replace 'app' with your Express app instance

export { verifyUser }
// Example Express route usage
// app.post('/verify', verifyUser)

// Remember to replace 'app' with your Express app instance
